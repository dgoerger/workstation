#!/bin/bash

## prep broadcast
# fetch REBOOT_DELAY (in minutes) if passed in as an argument
case ${1} in
  ''|*[!0-9]*) echo "not an integer" >/dev/null ;;
  *) REBOOT_DELAY=${1} ;;
esac
<% unless node['workstation']['patching']['reboot_delay'].nil? || ! node['workstation']['patching']['reboot_delay'].to_i -%>
chef_reboot_delay=<%= node['workstation']['patching']['reboot_delay'].to_i %>
case ${chef_reboot_delay} in
  ''|*[!0-9]*) echo "not an integer" >/dev/null ;;
  *) REBOOT_DELAY=${chef_reboot_delay} ;;
esac
<% end -%>
# else set a sane default for adequate pre-reboot warning
if [[ -z ${REBOOT_DELAY} ]]; then
  REBOOT_DELAY=5
fi
REBOOT_DELAY_STRING="${REBOOT_DELAY} minutes"
REBOOT_TIME="$(date --date="${REBOOT_DELAY_STRING}" +%H:%M)"
REBOOT_GRAPHICAL_BANNER="SYSTEM REBOOT AT ${REBOOT_TIME}"
REBOOT_GRAPHICAL_MESSAGE='Please save your work and log out.'
REBOOT_WALL_MESSAGE='Pending reboot - please save your work and log out.'

## issue reboot command - notifies shell users
/sbin/shutdown -r +${REBOOT_DELAY} "${REBOOT_WALL_MESSAGE}"

## notify graphical users
function libnotify {
# leverage libnotify to alert graphical users
if [[ -n "$(ps h -o tty -C 'Xwayland')" ]]; then
  # Wayland
  ttys="$(ps h -o tty -C 'Xwayland')"
elif [[ -n "$(ps h -o tty -C 'Xorg')" ]]; then
  # X11
  ttys="$(ps h -o tty -C 'Xorg')"
else
  # no graphics!
  ttys=''
fi
for tty in ${ttys}; do
  # normal console logins
  if [[ -n ${tty} ]] && [[ "${tty}" != '?' ]]; then
    x_user=$(LANG= who -u | grep "^[^ ]\+[ ]\+${tty}" | cut -d ' ' -f 1)
    if [[ -n ${x_user} ]] && [[ $(getent passwd ${x_user}) ]]; then
      machinectl shell ${x_user}@ /usr/bin/notify-send "${REBOOT_GRAPHICAL_BANNER}" "${REBOOT_GRAPHICAL_MESSAGE}" --icon=dialog-warning-symbolic --urgency=critical
    fi
  elif [[ "${tty}" == '?' ]]; then
    fastx_detected=1
  fi
done
if [[ -n ${fastx_detected} ]]; then
  # FastX remote users
  fastx_users=$(ps aux | grep 'FastX monitor' | grep -vE "^$(whoami)" | cut -d ' ' -f 1)
  for x_user in ${fastx_users}; do
    if [[ -n ${x_user} ]] && [[ $(getent passwd ${x_user}) ]]; then
      machinectl shell ${x_user}@ /usr/bin/notify-send "${REBOOT_GRAPHICAL_BANNER}" "${REBOOT_GRAPHICAL_MESSAGE}" --icon=dialog-warning-symbolic --urgency=critical
    fi
  done
fi
}

function detect_pending_reboot {
  # reboot has been moved to the session / logind per https://utcc.utoronto.ca/~cks/space/blog/linux/SystemdVersionOfShutdown
  result=$(qdbus --literal --system org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.DBus.Properties.Get org.freedesktop.login1.Manager ScheduledShutdown | awk -F'"' '{print $2}')
  if [[ "${result}" == "reboot" ]]; then
    return 0
  else
    return 1
  fi
}

while detect_pending_reboot; do
  # User matrix:
  # 1) logged in before shutdown command is issued (x < T)
  # 2) logged in between shutdown command and pre-reboot lockdown (T < x < R - 5)
  # 3) no users can log in when (R - 5 < x < R) - see `man 8 shutdown`
  #
  # Shell/SSH notifications:
  # - these broadcast every minute for free via `wall` thanks to `shutdown`
  #
  # Graphical notifications:
  # 1) first group receives initial notification (but might appreciate a reminder)
  # 2) second group needs a notification later
  # 3) third group does not exist
  #
  # Special case: second group does not exist (T = R - 5) when (REBOOT_DELAY=5)

  # issue a gui reminder every minute - not perfect but we solve all cases eh
  libnotify
  sleep 1m
done
